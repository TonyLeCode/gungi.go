// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: games.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/tabbed/pqtype"
)

const createGame = `-- name: CreateGame :one
INSERT INTO games (current_state, ruleset, type)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateGameParams struct {
	CurrentState string `json:"current_state"`
	Ruleset      string `json:"ruleset"`
	Type         string `json:"type"`
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createGame, arg.CurrentState, arg.Ruleset, arg.Type)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const gameJunction = `-- name: GameJunction :exec
INSERT INTO player_games (user_id, game_id, color)
VALUES ($1, $2, $3)
`

type GameJunctionParams struct {
	UserID uuid.UUID `json:"user_id"`
	GameID uuid.UUID `json:"game_id"`
	Color  string    `json:"color"`
}

func (q *Queries) GameJunction(ctx context.Context, arg GameJunctionParams) error {
	_, err := q.db.ExecContext(ctx, gameJunction, arg.UserID, arg.GameID, arg.Color)
	return err
}

const getGame = `-- name: GetGame :one
SELECT 
  games.id, games.fen, games.history, games.completed, games.date_started, games.date_finished, games.current_state, games.ruleset, games.type, 
  user1.raw_user_meta_data ->> 'username' AS player1,
  user2.raw_user_meta_data ->> 'username' AS player2
FROM games 
JOIN player_games AS player_games_1 ON games.id = player_games_1.game_id AND player_games_1.color = 'w' 
JOIN player_games AS player_games_2 ON games.id = player_games_2.game_id AND player_games_2.color = 'b' 
JOIN auth.users AS user1 ON user1.id = player_games_1.user_id
JOIN auth.users AS user2 ON user2.id = player_games_2.user_id
WHERE games.id = $1
`

type GetGameRow struct {
	ID           uuid.UUID      `json:"id"`
	Fen          sql.NullString `json:"fen"`
	History      sql.NullString `json:"history"`
	Completed    bool           `json:"completed"`
	DateStarted  time.Time      `json:"date_started"`
	DateFinished sql.NullTime   `json:"date_finished"`
	CurrentState string         `json:"current_state"`
	Ruleset      string         `json:"ruleset"`
	Type         string         `json:"type"`
	Player1      interface{}    `json:"player1"`
	Player2      interface{}    `json:"player2"`
}

func (q *Queries) GetGame(ctx context.Context, id uuid.UUID) (GetGameRow, error) {
	row := q.db.QueryRowContext(ctx, getGame, id)
	var i GetGameRow
	err := row.Scan(
		&i.ID,
		&i.Fen,
		&i.History,
		&i.Completed,
		&i.DateStarted,
		&i.DateFinished,
		&i.CurrentState,
		&i.Ruleset,
		&i.Type,
		&i.Player1,
		&i.Player2,
	)
	return i, err
}

const getIdFromUsername = `-- name: GetIdFromUsername :one
SELECT id FROM auth.users
WHERE raw_user_meta_data ->> 'username' = $1
`

func (q *Queries) GetIdFromUsername(ctx context.Context, rawUserMetaData pqtype.NullRawMessage) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getIdFromUsername, rawUserMetaData)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getOngoingGames = `-- name: GetOngoingGames :many
SELECT games.id, games.fen, games.completed, games.date_started, games.current_state, users1.raw_user_meta_data ->> 'username' as username1, users2.raw_user_meta_data ->> 'username' as username2
FROM games
JOIN player_games j ON games.id = j.game_id
JOIN auth.users users1 ON j.user_id = users1.id AND j.color = 'w'
JOIN player_games j2 ON games.id = j2.game_id AND j2.user_id != j.user_id AND j2.color ='b'
JOIN auth.users users2 ON j2.user_id = users2.id
WHERE (users1.id = $1 OR users2.id = $1) AND games.completed=false
`

type GetOngoingGamesRow struct {
	ID           uuid.UUID      `json:"id"`
	Fen          sql.NullString `json:"fen"`
	Completed    bool           `json:"completed"`
	DateStarted  time.Time      `json:"date_started"`
	CurrentState string         `json:"current_state"`
	Username1    interface{}    `json:"username1"`
	Username2    interface{}    `json:"username2"`
}

func (q *Queries) GetOngoingGames(ctx context.Context, id uuid.UUID) ([]GetOngoingGamesRow, error) {
	rows, err := q.db.QueryContext(ctx, getOngoingGames, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOngoingGamesRow
	for rows.Next() {
		var i GetOngoingGamesRow
		if err := rows.Scan(
			&i.ID,
			&i.Fen,
			&i.Completed,
			&i.DateStarted,
			&i.CurrentState,
			&i.Username1,
			&i.Username2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const makeMove = `-- name: MakeMove :exec
UPDATE games
SET current_state = $2, history = $3
WHERE id = $1
`

type MakeMoveParams struct {
	ID           uuid.UUID      `json:"id"`
	CurrentState string         `json:"current_state"`
	History      sql.NullString `json:"history"`
}

func (q *Queries) MakeMove(ctx context.Context, arg MakeMoveParams) error {
	_, err := q.db.ExecContext(ctx, makeMove, arg.ID, arg.CurrentState, arg.History)
	return err
}
